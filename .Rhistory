}else{
result <- merge(result,tmp,by.x="plotID",by.y="plotID")
}
}
}
View(result)
View(tmp)
a <- merge(result,tmp,by.x="plotID",by.y="plotID")
View(a)
View(tmp)
View(result)
var_merge <- function(dat_path, lst_vars_path){
for (i in 1:length(lst_vars_path)){
tmp <- get(load(paste0(dat_path,lst_vars_path[i],".RData")))
print(i)
if(i==1){
result <- tmp
}else{
result <- merge(result,tmp,by.x="plotID",by.y="plotID")
}
}
for (i in 1:length(lst_vars_path)){
tmp <- get(load(paste0(dat_path,lst_vars_path[i],".RData")))
print(i)
if(i==1){
result <- tmp
}else{
result <- merge(result,tmp,by.x="plotID",by.y="plotID")
}
}
for (i in 1:length(lst_vars_path)){
tmp <- get(load(paste0(dat_path,lst_vars_path[i],".RData")))
print(i)
if(i==1){
result <- tmp
}else{
result <- merge(result,tmp,by.x="plotID",by.y="plotID")
}
}
colnames(result#)
colnames(result)
for (i in 1:length(lst_vars_path)){
tmp <- get(load(paste0(dat_path,lst_vars_path[i],".RData")))
print(i)
if(i==1){
result <- tmp
}else{
result <- merge(result,tmp,by.x="plotID",by.y="plotID")
}
}
colnames(results)
colnames(result)
library(LiDARtools)
install.packages("gam")
library(LiDARtools)
library(LiDARtools)
library(LiDARtools)
rm(list=ls())
library(LiDARtools)
dat_path2 <- "E:/Projekte/Kili/data/"
dat_path2 <- "/media/hanna/data/Projekte/Kili/data/"
d_rst <- 50
rst_type <- c("chm")
group_name <- "kili"
chm_path2 <- paste0(dat_path2, "raster_db_", d_rst, "m/", rst_type[1], "/")
gap_fraction(dat_path = dat_path2, chm_path = chm_path2)
gap_fraction(dat_path = dat_path2, chm_path = chm_path2)
dat_path = dat_path2
chm_path = chm_path2
require(raster)
require(rgdal)
chm_lst <- list.files(chm_path)
gap_frac_all <- lapply(chm_lst, function(i){
chm <- raster::raster(paste0(chm_path, i))
raster::values(chm)[raster::values(chm) < gap_hght] <- NA
raster::values(chm)[is.finite(raster::values(chm))] <- 0
raster::values(chm)[is.na(raster::values(chm))] <- 1
clmp <- raster::clump(chm, directions = 8, gaps = F)
frq<-raster::as.data.frame(raster::freq(clmp))
excludeID <- frq$value[which(frq$count <= gap_sze)]
sieve <- clmp
sieve[values(clmp) %in% excludeID] <- NA
total_count <- length(raster::values(sieve))
clear_count <- sum(is.finite(raster::values(sieve)))
cover_count <- sum(is.na(raster::values(sieve)))
gap_frac_plt <- clear_count / total_count
return(list(substr(i,1,4), gap_frac_plt))
})
gap_frac <- raster::as.data.frame(do.call(rbind, gap_frac_all))
colnames(gap_frac) <- c("plotID", "gap_frac")
gap_frac
chm <- raster::raster(paste0(chm_path, i))
i <- 1
chm <- raster::raster(paste0(chm_path, i))
chm_lst[1]
chm_lst
chm_lst <- list.files(chm_path)
i <- chm_lst[1]
i
chm_lst <- list.files(chm_path)
chm_path
dat_path2 <- "E:/Projekte/Kili/data/"
gap_fraction(dat_path = dat_path2, chm_path = chm_path2)
chm_lst <- list.files(chm_path)
i <- chm_lst[1]
i
chm_lst <- list.files(chm_path)
chm_path
chm_path = chm_path2
i <- chm_lst[1]
chm_lst <- list.files(chm_path)
chm_path
dat_path2 <- "E:/Projekte/Kili/data/"
chm_path2 <- paste0(dat_path2, "raster_db_", d_rst, "m/", rst_type[1], "/")
chm_path = chm_path2
chm_path
i <- chm_lst[1]
chm_lst <- list.files(chm_path)
i <- chm_lst[1]
i
chm <- raster::raster(paste0(chm_path, i))
chm
raster::values(chm)[raster::values(chm) < gap_hght] <- NA
gap_hght = 10
gap_sze = 9
raster::values(chm)[raster::values(chm) < gap_hght] <- NA
raster::values(chm)[is.finite(raster::values(chm))] <- 0
raster::values(chm)[is.na(raster::values(chm))] <- 1
clmp <- raster::clump(chm, directions = 8, gaps = F)
frq<-raster::as.data.frame(raster::freq(clmp))
excludeID <- frq$value[which(frq$count <= gap_sze)]
sieve <- clmp
sieve[clmp %in% excludeID] <- NA
sieve
plot(sieve)
sieve <- clmp
plot(sieve)
clmp
excludeID
excludeID <- frq$value[which(frq$count <= gap_sze)]
excludeID
sieve[excludeID %in% clmp] <- NA
sieve[excludeID %in% clmp] <- NA
sieve
sieve[values(clmp) %in% excludeID] <- NA
sieve[values(clmp) %in% excludeID] <- NA
total_count <- length(raster::values(sieve))
clear_count <- sum(is.finite(raster::values(sieve)))
cover_count <- sum(is.na(raster::values(sieve)))
gap_frac_plt <- clear_count / total_count
return(list(substr(i,1,4), gap_frac_plt))
gap_frac <- raster::as.data.frame(do.call(rbind, gap_frac_all))
colnames(gap_frac) <- c("plotID", "gap_frac")
gap_frac
gap_frac
library(LiDARtools)
rm(list=ls())
########################################################################################
###Settings
########################################################################################
library(LiDARtools)
dat_path2 <- "E:/Projekte/Kili/data/"
#dat_path2 <- "/media/hanna/data/Projekte/Kili/data/"
d_rst <- 50
rst_type <- c("chm")
group_name <- "kili"
#gap_hght <- 10
#gap_sze <- 9
########
chm_path2 <- paste0(dat_path2, "raster_db_", d_rst, "m/", rst_type[1], "/")
gap_fraction(dat_path = dat_path2, chm_path = chm_path2)
library(LiDARtools)
structure_query <- function( dat_path, r_pnts = 10, db_layers = c("kili", "kili2"), group_name = "kili",
db = "http://192.168.191.183:8081", db_login = "user:password", location = NA,
functions = NA){
library(rPointDB)
remotesensing <- RemoteSensing$new(db, db_login)
str_var_all_lay <- lapply(db_layers, function(i){
pointdb <- remotesensing$pointdb(i)
if (missing(location)){
# get one POI group
location <- remotesensing$poi_group(group_name=group_name)
colnames(location) <- c("plotID", "x_pnt","y_pnt")
}
# create areas of all POIs in a POI-group with 10 meter squares
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
#get all lidar index processing functions
if(missing(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
df <- pointdb$process(areas=areas, functions=functions)
})
db_structure <- do.call(rbind, str_var_all_lay)
save(db_structure, file = paste0(dat_path, "db_structure.RData"))
}
structure_query(dat_path = dat_path, location = location)
structure_query <- function( dat_path, r_pnts = 10, db_layers = c("kili", "kili2"), group_name = "kili",
db = "http://192.168.191.183:8081", db_login = "user:password", location = NA,
functions = NA){
library(rPointDB)
remotesensing <- RemoteSensing$new(db, db_login)
str_var_all_lay <- lapply(db_layers, function(i){
pointdb <- remotesensing$pointdb(i)
if(missing(location)){
# get one POI group
location <- remotesensing$poi_group(group_name=group_name)
colnames(location) <- c("plotID", "x_pnt","y_pnt")
}
# create areas of all POIs in a POI-group with 10 meter squares
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
#get all lidar index processing functions
if(missing(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
df <- pointdb$process(areas=areas, functions=functions)
})
db_structure <- do.call(rbind, str_var_all_lay)
save(db_structure, file = paste0(dat_path, "db_structure.RData"))
}
structure_query(dat_path = dat_path, location = location)
structure_query <- function( dat_path, r_pnts = 10, db_layers = c("kili", "kili2"), group_name = "kili",
db = "http://192.168.191.183:8081", db_login = "user:password", location = NA,
functions = NA){
library(rPointDB)
remotesensing <- RemoteSensing$new(db, db_login)
if(missing(location)){
# get one POI group
location <- remotesensing$poi_group(group_name=group_name)
colnames(location) <- c("plotID", "x_pnt","y_pnt")
}
str_var_all_lay <- lapply(db_layers, function(i){
pointdb <- remotesensing$pointdb(i)
# create areas of all POIs in a POI-group with 10 meter squares
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
#get all lidar index processing functions
if(missing(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
df <- pointdb$process(areas=areas, functions=functions)
})
db_structure <- do.call(rbind, str_var_all_lay)
save(db_structure, file = paste0(dat_path, "db_structure.RData"))
}
structure_query(dat_path = dat_path, location = location)
if(missing(location))
==T
library(LiDARtools)
dat_path <- "E:/Projekte/Kili/data/"
r_pnts <- 10
d_rst <- 50
db_layers <- c("kili", "kili2")
db <- "http://192.168.191.183:8081"
db_login <- "user:password"
tec_crdnt <- read.csv(paste0(dat_path,"tec_crdnt.csv"), header=T, sep=",")
location <- unique(tec_crdnt[, c("plotID", "x_pnt", "y_pnt")])
rst_type <- c("chm")
group_name <- "kili"
gap_hght <- 10
gap_sze <- 9
########
pnts_path <- paste0("points_", r_pnts, "m.RData")
chm_path <- paste0(dat_path, "raster_db_", d_rst, "m/", rst_type[1], "/")
point_str_path <- "point_structure"
gap_frac_path <- "gap_structure"
dat_SR_path <- "dat_SR"
lst_vars_path <- c(dat_SR_path, point_str_path, gap_frac_path)
remotesensing <- RemoteSensing$new(db, db_login)
str_var_all_lay <- lapply(db_layers, function(i){
pointdb <- remotesensing$pointdb(i)
# create areas of all POIs in a POI-group with 10 meter squares
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
#get all lidar index processing functions
if(missing(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
df <- pointdb$process(areas=areas, functions=functions)
})
str_var_all_lay <- lapply(db_layers, function(i){
pointdb <- remotesensing$pointdb(i)
# create areas of all POIs in a POI-group with 10 meter squares
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
df <- pointdb$process(areas=areas, functions=functions)
})
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
remotesensing <- RemoteSensing$new(db, db_login)
if(is.na(functions)){
print("fehlt!")
}
for (i in db_layers){
#str_var_all_lay <- lapply(db_layers, function(i){
pointdb <- remotesensing$pointdb(i)
# create areas of all POIs in a POI-group with 10 meter squares
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
#get all lidar index processing functions
if(missing(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
df <- pointdb$process(areas=areas, functions=functions)
}
R.version()
R.Version
R.Version()
functions = NULL
if(is.null(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
structure_query <- function( dat_path, r_pnts = 10, db_layers = c("kili", "kili2"), group_name = "kili",
db = "http://192.168.191.183:8081", db_login = "user:password", location = NA,
functions = NULL){
library(rPointDB)
remotesensing <- RemoteSensing$new(db, db_login)
if(missing(location)){
# get one POI group
location <- remotesensing$poi_group(group_name=group_name)
colnames(location) <- c("plotID", "x_pnt","y_pnt")
}
str_var_all_lay <- lapply(db_layers, function(i){
pointdb <- remotesensing$pointdb(i)
# create areas of all POIs in a POI-group with 10 meter squares
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
#get all lidar index processing functions
if(is.null(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
df <- pointdb$process(areas=areas, functions=functions)
})
db_structure <- do.call(rbind, str_var_all_lay)
save(db_structure, file = paste0(dat_path, "db_structure.RData"))
}
structure_query(dat_path = dat_path, location = location)
load( file = paste0(dat_path, "db_structure.RData"))
View(db_structure)
db_layers
i <- "kili"
pointdb <- remotesensing$pointdb(i)
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
areas
extent_diameter()
extent_diameter()
extent_diameter
View(db_structure)
View(location)
mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
pointdb$process
str(areas)
areas[1]
pointdb$process
db_str_path <- "db_structure"
lst_vars_path <- c(dat_SR_path, point_str_path, gap_frac_path, db_str_path)
var_merge(dat_path = dat_path, lst_vars_path = lst_vars_path)
View(db_structure)
colnames(db_structure)[1]
colnames(db_structure)[1] <- "plotID"
db_structure$plotID <- location$plotID
save(db_structure, file = paste0(dat_path, "db_structure.RData"))
View(db_structure)
var_merge(dat_path = dat_path, lst_vars_path = lst_vars_path)
load(paste0(dat_path, "dat_ldr_merge.RData"))
load(paste0(dat_path, "dat_ldr_mrg.RData"))
View(mrg_tbl)
colnames(mrg_tbl)
# Description:
# Author: Alice Ziegler
# Date: 2017-10-16 16:13:38
########################################################################################
###Documentation
########################################################################################
########################################################################################
########################################################################################
rm(list=ls())
########################################################################################
###Settings
########################################################################################
library(LiDARtools)
dat_path <- "E:/Projekte/Kili/data/"
r_pnts <- 10
d_rst <- 50
db_layers <- c("kili", "kili2")
db <- "http://192.168.191.183:8081"
db_login <- "user:password"
tec_crdnt <- read.csv(paste0(dat_path,"tec_crdnt.csv"), header=T, sep=",")
location <- unique(tec_crdnt[, c("plotID", "x_pnt", "y_pnt")])
rst_type <- c("chm")
group_name <- "kili"
gap_hght <- 10
gap_sze <- 9
########
pnts_path <- paste0("points_", r_pnts, "m.RData")
chm_path <- paste0(dat_path, "raster_db_", d_rst, "m/", rst_type[1], "/")
point_str_path <- "point_structure"
gap_frac_path <- "gap_structure"
dat_SR_path <- "dat_SR"
lst_vars_path <- c(dat_SR_path, point_str_path, gap_frac_path)
db_layers = c("kili", "kili2")
group_name = "kili"
db = "http://192.168.191.183:8081"
db_login = "user:password"
location = NA
functions = NA
functions = NULL
remotesensing <- RemoteSensing$new(db, db_login)
location <- remotesensing$poi_group(group_name=group_name)
library(rPointDB)
remotesensing <- RemoteSensing$new(db, db_login)
location <- remotesensing$poi_group(group_name=group_name)
library(LiDARtools)
location <- remotesensing$poi_group(group_name=group_name)
colnames(location) <- c("plotID", "x_pnt","y_pnt")
db_layers
i <- db_layers[1]
i
pointdb <- remotesensing$pointdb(i)
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
areas
names(areas)
pointdb$process
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
if(is.null(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
df <- pointdb$process(areas=areas, functions=functions)
df
View(df)
View(df)
db_structure <- do.call(rbind, str_var_all_lay)
str_var_all_lay <- lapply(db_layers, function(i){
pointdb <- remotesensing$pointdb(i)
# create areas of all POIs in a POI-group with 10 meter squares
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
#get all lidar index processing functions
if(is.null(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
df <- pointdb$process(areas=areas, functions=functions)
})
db_structure <- do.call(rbind, str_var_all_lay)
View(db_structure)
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
colnames(db_structure)[1] <- "plotID"
colnames(db_structure)[1] <- "plotID"
save(db_structure, file = paste0(dat_path, "db_structure.RData"))
structure_query <- function( dat_path, r_pnts = 10, db_layers = c("kili", "kili2"), group_name = "kili",
db = "http://192.168.191.183:8081", db_login = "user:password", location = NA,
functions = NULL){
library(rPointDB)
remotesensing <- RemoteSensing$new(db, db_login)
if(missing(location)){
# get one POI group
location <- remotesensing$poi_group(group_name=group_name)
colnames(location) <- c("plotID", "x_pnt","y_pnt")
}
str_var_all_lay <- lapply(db_layers, function(i){
pointdb <- remotesensing$pointdb(i)
# create areas of all POIs in a POI-group with 10 meter squares
areas <- mapply(function(name, x, y) {return(extent_diameter(x=x, y=y, d=10))}, location$plotID,
location$x_pnt, location$y_pnt)
#get all lidar index processing functions
if(is.null(functions)){
functions_df <-  pointdb$processing_functions
functions <- functions_df$name
}
df <- pointdb$process(areas=areas, functions=functions)
})
db_structure <- do.call(rbind, str_var_all_lay)
colnames(db_structure)[1] <- "plotID"
save(db_structure, file = paste0(dat_path, "db_structure.RData"))
}
structure_query(dat_path = dat_path, location = location)
load( file = paste0(dat_path, "db_structure.RData"))
View(db_structure)
library(LiDARtools)
db_str_path <- "db_structure"
lst_vars_path <- c(dat_SR_path, db_str_path, point_str_path, gap_frac_path)
var_merge(dat_path = dat_path, lst_vars_path = lst_vars_path)
dat_path <- "E:/Projekte/Kili/data/"
path, "dat_ldr_merge.RData"))
load(paste0(dat_path, "dat_ldr_merge.RData"))
load(paste0(dat_path, "dat_ldr_merge.RData"))
load(paste0(dat_path, "dat_ldr_mrg.RData"))
View(mrg_tbl)
summary(mrg_tbl)
is.coplete(mrg_tbl)
is.complete(mrg_tbl)
complete.cases(mrg_tbl)
length(c(TRUE, FALS, TRUE))
length(c(TRUE, FALSE, TRUE))
frequency(c(TRUE, FALSE, TRUE))
sum(c(TRUE, FALSE, TRUE))
sum(complete.cases(mrg_tbl))
